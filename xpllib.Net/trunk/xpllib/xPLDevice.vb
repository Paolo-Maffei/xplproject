'* xPL Library for .NET
'*
'* Version 5.3
'*
'* Copyright (c) 2009-2011 Thijs Schreijer
'* http://www.thijsschreijer.nl
'*
'* Copyright (c) 2008-2009 Tom Van den Panhuyzen
'* http://blog.boxedbits.com/xpl
'*
'* Copyright (C) 2003-2005 John Bent
'* http://www.xpl.myby.co.uk
'*
'* This program is free software; you can redistribute it and/or
'* modify it under the terms of the GNU General Public License
'* as published by the Free Software Foundation; either version 2
'* of the License, or (at your option) any later version.
'* 
'* This program is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'*
'* You should have received a copy of the GNU General Public License
'* along with this program; if not, write to the Free Software
'* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
'* Linking this library statically or dynamically with other modules is
'* making a combined work based on this library. Thus, the terms and
'* conditions of the GNU General Public License cover the whole
'* combination.
'* As a special exception, the copyright holders of this library give you
'* permission to link this library with independent modules to produce an
'* executable, regardless of the license terms of these independent
'* modules, and to copy and distribute the resulting executable under
'* terms of your choice, provided that you also meet, for each linked
'* independent module, the terms and conditions of the license of that
'* module. An independent module is a module which is not derived from
'* or based on this library. If you modify this library, you may extend
'* this exception to your version of the library, but you are not
'* obligated to do so. If you do not wish to do so, delete this
'* exception statement from your version.

Option Strict On
Imports System.Collections
Imports Microsoft.Win32
Imports System.Net
Imports System.Net.Sockets
Imports System.Xml
Imports System.Text
Imports System.IO
Imports xPL.xPL_Base

''' <summary>
''' Represents an xPL device with all handling that comes with it; configuration 
''' items, status reporting, events generated, etc.
''' </summary>
''' <remarks></remarks>
Public Class xPLDevice
    Implements IDisposable

    ''' <summary>
    ''' This is a delegate function that can be used to add your own items to the heartbeat messages generated by 
    ''' an <c>xPLDevice</c> object. The function will be called before the heartbeat is sent.
    ''' </summary>
    ''' <returns>You must provide the items to be added as a <c>xPLKeyValuePairs</c> object</returns>
    ''' <remarks></remarks>
    Public Delegate Function HBeatItemsCallback(ByVal xpldev As xPLDevice) As xPLKeyValuePairs

#Region "Events"

    ''' <summary>
    ''' Event signalling that an xPL message has been received
    ''' </summary>
    ''' <param name="xpldev">The xPLDevice object that raised the event.</param>
    ''' <param name="e">Event parameter containing the received message.</param>
    ''' <remarks>All internal handling has been done before the event is raised (heartbeats, configuration, requests, etc.)</remarks>
    Public Event xPLMessageReceived(ByVal xpldev As xPLDevice, ByVal e As xPLEventArgs)
    ''' <summary>
    ''' Event signalling that the device has been configured using an xPL configuration tool.
    ''' </summary>
    ''' <param name="xpldev">Device that was configured</param>
    ''' <remarks>Only raised once, after initial configuration the <c>Configured</c> property will be set to 
    ''' <c>True</c> and any following updates of the configuration will result in an <see cref="xPLReConfigDone"/> event.</remarks>
    Public Event xPLConfigDone(ByVal xpldev As xPLDevice)
    ''' <summary>
    ''' Event signalling that the device has been reconfigured using an xPL configuration tool.
    ''' </summary>
    ''' <param name="xpldev">Device that was reconfigured</param>
    ''' <remarks>Will not be raised after initial configuration, but only after any following updates of the
    '''  configuration. The initial configuration will result in an <see cref="xPLConfigDone"/> event.</remarks>
    Public Event xPLReConfigDone(ByVal xpldev As xPLDevice)
    ''' <summary>
    ''' Event signalling that the device has changed status. See <see cref="Status"/> property for details on 
    ''' the different statusses
    ''' </summary>
    ''' <param name="xpldev">Device that changed status</param>
    ''' <param name="prevState">Status of the device before the change</param>
    ''' <param name="newState">New status of the device after the change</param>
    ''' <remarks>The <c>Status</c> property will still have the old value when the event is raised!</remarks>
    Public Event xPLStatusChange(ByVal xpldev As xPLDevice, ByVal prevState As xPLDeviceStatus, ByVal newState As xPLDeviceStatus) 'raised when the app has detected a hub or lost it

    ''' <summary>
    ''' Eventarguments containing the received xPLMessage
    ''' </summary>
    ''' <remarks>Use by the xPLMessageReceived event, to pass the message that was received.</remarks>
    Public Class xPLEventArgs
        Inherits EventArgs
        ''' <summary>
        ''' The <c>xPLMessage</c> object representing the message received
        ''' </summary>
        ''' <remarks></remarks>
        Public XplMsg As xPLMessage
        ''' <summary>
        ''' <c>True</c> if the message is an echo of a message send by the device itself, <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsMyEcho As Boolean
        ''' <summary>
        ''' <c>True</c> if the message has a schema class 'hbeat', <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsHeartbeat As Boolean
        ''' <summary>
        ''' <c>True</c> if the message has a schema class 'config', <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsConfig As Boolean
        ''' <summary>
        ''' <c>True</c> if the message has a target address that is equal to the device address, <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsForMeSpecific As Boolean
        ''' <summary>
        ''' <c>True</c> if the message was send to a xPL group address that the device is a member of, <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsForMeGroup As Boolean
        ''' <summary>
        ''' <c>True</c> if the message was send to the xPL broadcast address "*", <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsForMeBroadcast As Boolean
        ''' <summary>
        ''' <c>True</c> if the message matches with any of the filters as set for the device, <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsFilterMatch As Boolean
        ''' <summary>
        ''' <c>True</c> if the message was sent to either 1) specific address of the device, or 2) to a group the 
        ''' device is member of, or 3) to the xPL broadcast address "*", <c>False</c> otherwise
        ''' </summary>
        ''' <remarks></remarks>
        Public IsForMe As Boolean

        Public Sub New(ByVal x As xPLMessage)
            XplMsg = x
        End Sub
    End Class

#End Region

#Region "Properties"

    ''' <summary>
    ''' Set the flags of this property to indicate for which messages an xPLMessageReceived event needs to be raised.
    ''' </summary>
    ''' <remarks>See xPLDevice.MessagePassingEnum for details.</remarks>
    Public MessagePassing As MessagePassingEnum = MessagePassingEnum.ToBeHandledOnly
    ''' <summary>
    ''' The version number will initially hold the version information of the main assembly (not of xPLLib) and will be added to heartbeat messages. 
    ''' It can be overwritten by any other value, which will then be added to the heartbeat messages.
    ''' </summary>
    ''' <remarks>This property will NOT be stored when calling the <c>GetState</c> method. So if a custom value is
    ''' being used, that custom value must be restored after recreating a device from a SavedState string.
    ''' Setting it to an empty string will prevent it from being added to the heartbeat messages.</remarks>
    Public VersionNumber As String ' Variable to hold version string from this assembly (xpllib.dll)
    ''' <summary>
    ''' Provides a custom identification tag for an <c>xPLDevice</c> object. Use <see cref="xPLListener.Device"/> 
    ''' to return a <c>xPLDevice</c> object from the devicelist based on the <c>CustomID</c> value.
    ''' </summary>
    ''' <remarks>When using the <see cref="xPLListener.RestoreFromState"/> method, then the <c>CustomID</c> property can 
    ''' be used to uniquely identify the devices (that have been recreated from the <c>SavedState</c> value) to 
    ''' reattach the eventhandlers and callback methods for each specific object.</remarks>
    Public CustomID As String = ""
    ''' <summary>
    ''' This string property of the <c>xPLDevice</c> object can be used to store custom settings. The settings are persistent in between
    ''' application sessions through the <c>GetState</c> method. It is not being used by the 
    ''' <c>xPLDevice</c> object itself, but will be included when <c>GetState</c> is used and when a new <c>xPLDevice</c> object is 
    ''' recreated from a <c>SavedState</c> value. 
    ''' </summary>
    Public CustomSettings As String = ""

    ' other properties
    Private Disposing As Boolean = False
    Private XPLTimer As Timers.Timer ' Timer to allow sending of heartbeat messages
    Private mHBeatCount As Integer = 0 ' Number of seconds since last heartbeat
    Private mHubWaitTime As Integer = 0 ' number of seconds we're waiting for an echo telling us the hub is working.

    ' Checking whether I'm still connected
    Private mLastOwnHBeatSend As DateTime = Now ' time when i last send a heartbeat, this will be reset each
    ' time a heartbeat message is being send.
    Private mLastHBeatEchoHeard As DateTime = Now  ' When have I last heard the echo of my last message? 

    ''' <summary>
    ''' This is a delegate function that can be used to add your own items to the heartbeat messages generated by 
    ''' an <c>xPLDevice</c> object.
    ''' </summary>
    ''' <remarks></remarks>
    Public xPLGetHBeatItems As HBeatItemsCallback = Nothing

    Private mConfigItems As New xPLConfigItems
    ''' <summary>
    ''' This property provides access to the xPLConfigItems object that holds the configuration items for the device.
    ''' </summary>
    ''' <remarks>See xPLConfigItems for details.</remarks>
    Public ReadOnly Property ConfigItems() As xPLConfigItems
        Get
            Return mConfigItems
        End Get
    End Property

    Private mConfigurable As Boolean = True
    ''' <summary>
    ''' Determines whether the device is configurable. If <c>True</c>, instructs the device to respond on configuration requests received from the xPL network.
    ''' </summary>
    ''' <value><c>True</c> if the device is configurable, <c>False</c> otherwise</value>
    ''' <returns><c>True</c> if the device is configurable, <c>False</c> otherwise</returns>
    ''' <remarks>If the device is already online and it has already been configured, changing this setting has no effect. If it 
    ''' wasn't configured already extra heartbeats will be send to end regular/config status and enter the correct status as appropriate.
    ''' NOTE: If set to <c>False</c> the device addres; 'vendor.device.instance' will not be configurable, so they must be set properly before going online!!</remarks>
    Public Property Configurable() As Boolean
        Get
            Return mConfigurable
        End Get
        Set(ByVal value As Boolean)
            If mConfigurable = value Then
                ' do nothing, no state change
                If Debug Then LogError("xPLDevice.Configurable", "No change, nothing to do")
            Else
                If mConfigurable And mStatus <> xPLDeviceStatus.Offline Then
                    ' I'm currently configurable and connecting/connected, but must change to NOT configurable....
                    If Not mConfigured Then
                        If Debug Then LogError("xPLDevice.Configurable", "Changing to NOT configurable while online/connecting")
                        ' I'm still in config mode, sending config heartbeats. End that.
                        Me.SendHeartbeatMessage(True)   ' send end heartbeat, indicating no longer configurable
                        mConfigurable = False
                        Me.SendHeartbeatMessage()       ' send heartbeat
                    Else
                        ' nothing to do, configuration was already done, so normal heartbeats can continue
                        If Debug Then LogError("xPLDevice.Configurable", "Changing to NOT configurable while offline")
                        mConfigurable = False
                    End If
                ElseIf Not mConfigurable And mStatus <> xPLDeviceStatus.Offline Then
                    ' I'm currently NOT configurable and connecting/connected, but must change to configurable...
                    If Not mConfigured Then
                        If Debug Then LogError("xPLDevice.Configurable", "Changing to configurable while online/connecting")
                        ' I'm not configured yet, so I need to go into config heartbeat mode
                        Me.SendHeartbeatMessage(True)   ' send end heartbeat, indicating no longer available
                        mConfigurable = True
                        Me.SendHeartbeatMessage()       ' send config heartbeat, telling the world I need configuration
                    Else
                        ' nothing to do, I'm already configured, so normal heartbeats can continue
                        If Debug Then LogError("xPLDevice.Configurable", "Changing to configurable while offline")
                        mConfigurable = True
                    End If
                Else
                    ' for all other cases, just change state
                    If Debug Then LogError("xPLDevice.Configurable", "Configurable = " & value.ToString)
                    mConfigurable = value
                End If
            End If
            If Debug Then LogError("xPLDevice.Configurable", "Done")
        End Set
    End Property

    ''' <summary>
    ''' Property to read or set the "Vendor" part of the xPL device address
    ''' </summary>
    ''' <value>vendor id to be set</value>
    ''' <returns>string containing the vendor id</returns>
    ''' <remarks>Changing the value of the <c>VendorID</c> property while the device is enabled will cause the
    ''' appropriate heartbeats to be sent.</remarks>
    ''' <exception cref="IllegalIDsInAddress">Condition: Either; <c>value</c> contains a wildcard, or <c>value</c> has a length outside 
    ''' allowed boundaries, or <c>value</c> contains unallowed characters.</exception>
    Public Property VendorID() As String
        Get
            Return mConfigItems.Address.Vendor
        End Get
        Set(ByVal value As String)
            If Debug Then LogError("xPLDevice.Vendor", "Vendor = " & value)
            Dim addr As New xPLAddress(xPLAddressType.Source, mConfigItems.Address.ToString)
            addr.Vendor = value ' causes exception if invalid data was provided
            Me.Address = addr.ToString  ' set it and send heartbeat if necessary
            If Debug Then LogError("xPLDevice.Vendor", "Done" & mDebug.ToString)
        End Set
    End Property

    ''' <summary>
    ''' Property to read or set the "Device" part of the xPL device address
    ''' </summary>
    ''' <value>device id to be set</value>
    ''' <returns>string containing the device id</returns>
    ''' <remarks>Changing the value of the <c>DeviceID</c> property while the device is enabled will cause the
    ''' appropriate heartbeats to be sent.</remarks>
    ''' <exception cref="IllegalIDsInAddress">Condition: Either; <c>value</c> contains a wildcard, or <c>value</c> has a length outside 
    ''' allowed boundaries, or <c>value</c> contains unallowed characters.</exception>
    Public Property DeviceID() As String
        Get
            Return mConfigItems.Address.Device
        End Get
        Set(ByVal value As String)
            If Debug Then LogError("xPLDevice.Device", "Device = " & value)
            Dim addr As New xPLAddress(xPLAddressType.Source, mConfigItems.Address.ToString)
            addr.Device = value ' causes exception if invalid data was provided
            Me.Address = addr.ToString  ' set it and send heartbeat if necessary
            If Debug Then LogError("xPLDevice.Device", "Done")
        End Set
    End Property

    ''' <summary>
    ''' Property to read or set the "Instance" part of the xPL device address
    ''' </summary>
    ''' <value>instance id to be set</value>
    ''' <returns>string containing the instance id</returns>
    ''' <remarks>Changing the value of the <c>InstanceID</c> property while the device is enabled will cause the
    ''' appropriate heartbeats to be sent.</remarks>
    ''' <exception cref="IllegalIDsInAddress">Condition: Either; <c>value</c> contains a wildcard, or <c>value</c> has a length outside 
    ''' allowed boundaries, or <c>value</c> contains unallowed characters.</exception>
    Public Property InstanceID() As String
        Get
            Return mConfigItems.Address.Instance
        End Get
        Set(ByVal value As String)
            Dim addr As New xPLAddress(xPLAddressType.Source, mConfigItems.Address.ToString)
            If Debug Then LogError("xPLDevice.InstanceID", "InstanceID = " & value)
            addr.Instance = value ' causes exception if invalid data was provided
            Me.Address = addr.ToString  ' set it and send heartbeat if necessary
            mInstanceType = InstanceCreation.SetByParent
            If Debug Then LogError("xPLDevice.InstanceID", "Done")
        End Set
    End Property

    Dim mInstanceType As InstanceCreation = InstanceCreation.SetByParent
    ''' <summary>
    ''' Set the type of instance name to be used.
    ''' If this property is set to either a randomized or a hostbased instance, then this will be generated and be used to replace the
    ''' current value of the <c>InstanceID</c> property (appropriate hbeats will be sent if the device is Enabled).
    ''' </summary>
    ''' <remarks>The value of this property is only valid as long as the user of the xPL device has not reconfigured
    ''' the device with a new name.</remarks>
    Public Property InstanceIDType() As InstanceCreation
        Get
            Return mInstanceType
        End Get
        Set(ByVal value As InstanceCreation)
            If value <> mInstanceType Then
                If Debug Then LogError("xPLDevice.InstanceIDType", "InstanceIDType = " & value.ToString)
                Select Case value
                    Case InstanceCreation.HostNameBased
                        Me.InstanceID = xPLAddress.GetHostBasedInstanceId
                        mInstanceType = InstanceCreation.HostNameBased
                    Case InstanceCreation.Randomized
                        Me.InstanceID = xPLAddress.GetRandomInstanceId
                        mInstanceType = InstanceCreation.Randomized
                    Case InstanceCreation.SetByParent
                        ' do nothing
                End Select
            End If
        End Set
    End Property

    ''' <summary>
    ''' Returns the full xPL address of the device formatted as 'vendor-device.instance'
    ''' </summary>
    ''' <remarks>If the device is enabled, then appropriate heartbeat/config end messages will be sent.</remarks>
    Public Property Address() As String
        Get
            Return mConfigItems.Address.ToString
        End Get
        Set(ByVal value As String)
            Dim addr As xPLAddress
            Try
                If Debug Then LogError("xPLDevice.Address", "Address = " & value)
                addr = New xPLAddress(xPLAddressType.Source, value)
            Catch ex As Exception
                ' probably illegal address value, so throw same exception again and exit
                If Debug Then LogError("xPLDevice.Address", "Failed", EventLogEntryType.Error)
                Throw ex
            End Try
            ' check if name changed
            If addr.ToString <> mConfigItems.Address.ToString Then
                If Debug Then LogError("xPLDevice.Address", "Changed from '" & addr.ToString & "' to '" & mConfigItems.Address.ToString & "'")
                If mStatus <> xPLDeviceStatus.Offline Then
                    ' check if it is different, and send heartbeats if required
                    SendHeartbeatMessage(True)  ' send end heartbeat
                    mConfigItems.Address.Vendor = addr.Vendor
                    mConfigItems.Address.Device = addr.Device
                    mConfigItems.Address.Instance = addr.Instance
                    SendHeartbeatMessage(False) ' send new heartbeat
                    If Debug Then LogError("xPLDevice.Address", "Device status is 'connecting' or 'online', Heartbeat end send, heartbeat new send")
                Else
                    'no heartbeats, just set address
                    mConfigItems.Address.Vendor = addr.Vendor
                    mConfigItems.Address.Device = addr.Device
                    mConfigItems.Address.Instance = addr.Instance
                    If Debug Then LogError("xPLDevice.Address", "Device is 'Offline', no heartbeats send")
                End If
            End If
            If Debug Then LogError("xPLDevice.Address", "Done.")
        End Set
    End Property

    Private mConfigured As Boolean = Not mConfigurable
    ''' <summary>
    ''' Read-only property indicating whether the device was configured through an xPL device manager.
    ''' </summary>
    ''' <remarks></remarks>
    Public ReadOnly Property Configured() As Boolean
        Get
            Return mConfigured
        End Get
    End Property

    Private mEnabled As Boolean = False
    ''' <summary>
    ''' Use this property to enable or disable the device on the xPL network. Setting it to True will start the heartbeat sequence, 
    ''' and/or the configuration sequence. Setting it to False will stop those sequences and send a final heartbeat (type 'end') 
    ''' message to indicate the device is leaving the network.
    ''' </summary>
    ''' <remarks>Check the Status property for actual status of the device being connected or not.</remarks>
    Public Property Enabled() As Boolean
        Get
            Return mEnabled
        End Get
        Set(ByVal value As Boolean)
            If mEnabled = value Then
                ' do nothing, no state change
                If Debug Then LogError("xPLDevice.Enabled", "No change, nothing to do")
            Else
                ' enabled has changed state, now act accordingly
                mEnabled = value
                If mEnabled And mStatus = xPLDeviceStatus.Offline Then
                    ' we're going from offline to online !
                    If Debug Then LogError("xPLDevice.Enabled", "Switching from Offline to Connecting/Online")
                    If XPLTimer Is Nothing Then
                        XPLTimer = New Timers.Timer
                        XPLTimer.AutoReset = False
                        XPLTimer.Interval = XPL_TIMER_FREQ * 1000 ' set in milisecs
                        AddHandler XPLTimer.Elapsed, AddressOf XPLTimerElapsed
                    End If
                    mHubWaitTime = 0
                    mHBeatCount = 0
                    ' raiseevent to tell we're moving from offline to connecting status.
                    Try
                        RaiseEvent xPLStatusChange(Me, xPLDeviceStatus.Offline, xPLDeviceStatus.Connecting)
                    Catch ex As Exception
                        LogError("xPLDevice.Enabled", "Exception returned from raising xPLStatusChange event: " & ex.ToString, EventLogEntryType.Error)
                    End Try
                    mStatus = xPLDeviceStatus.Connecting
                    'Finally start sending heartbeats!
                    XPLTimer.Enabled = True
                    XPLTimerElapsed(Nothing, Nothing)
                ElseIf Not mEnabled And (mStatus = xPLDeviceStatus.Connecting Or mStatus = xPLDeviceStatus.Online) Then
                    ' we're going offline !
                    If Debug Then LogError("xPLDevice.Enabled", "Switching from Online/Connecting to Offline")
                    If Not XPLTimer Is Nothing Then
                        XPLTimer.Stop()
                        XPLTimer = Nothing
                    End If

                    mEnabled = True ' set enabled to true very short, to be able to sent the heartbeat
                    SendHeartbeatMessage(True)  ' tell the world we're leaving 
                    mEnabled = False ' set enabled back to false
                    Try
                        RaiseEvent xPLStatusChange(Me, mStatus, xPLDeviceStatus.Offline)
                    Catch ex As Exception
                        LogError("xPLDevice.Enabled", "Exception returned from raising xPLStatusChange event: " & ex.ToString, EventLogEntryType.Error)
                    End Try
                    mStatus = xPLDeviceStatus.Offline
                End If
            End If
            If Debug Then LogError("xPLDevice.Enabled", "Done")
        End Set
    End Property

    Private mStatus As xPLDeviceStatus = xPLDeviceStatus.Offline
    ''' <summary>
    ''' Returns the actual status of the device regarding it being connected to the xPL network. <c>Offline</c> and <c>Online</c> 
    ''' are obvious. <c>Connecting</c> means the device has been enabled, yet has not yet received its own heartbeat echo back.
    ''' This might indicate that there is no hub or the hub is not properly functioning. While no echo has been received
    ''' back, it cannot be assumed that the device is connected to the xPL network.
    ''' </summary>
    ''' <remarks>Read-only. Use the <c>Enabled</c> property to make changes.</remarks>
    Public ReadOnly Property Status() As xPLDeviceStatus
        Get
            Return mStatus
        End Get
    End Property

    Private mDebug As Boolean = False
    ''' <summary>
    ''' Sets or gets the debugging status of the device. If set to <c>True</c> there will be substantially more
    ''' logging. If there is a configitem called 'debug' then the property value can be changed through a 
    ''' config.response command message with 'debug=true/on/1' or 'debug=false/off/0'.
    ''' </summary>
    ''' <remarks>By default a (hidden) configitem 'debug' will be created for every new device. If the user 
    ''' should not be able to modify the value of the <seealso cref="xPLDevice.Debug"/> property then remove 
    ''' the configitem by calling <c>ConfigItems.Remove("debug")</c> on the xPLDevice object.</remarks>
    Public Property Debug() As Boolean
        Get
            Return mDebug
        End Get
        Set(ByVal value As Boolean)
            mDebug = value
            If Debug Then LogError("xPLDevice.Debug", "Debug = " & mDebug.ToString)
        End Set
    End Property

#End Region

#Region "Constructors, destructors"

    ''' <summary>
    ''' Creates a new instance of an <c>xPLDevice</c> object.
    ''' </summary>
    ''' <remarks>The deafult address will be 'vendorid-deviceid.xxx", where 'xxx' will be a 16 character 
    ''' randomized instance ID</remarks>
    Public Sub New()
        VersionNumber = GetVersionNumber()
        ' add the hidden debug ci
        Me.ConfigItems.Add("debug", mDebug.ToString, xPLConfigTypes.xOption, 1)
        Me.ConfigItems.Item("debug").Hidden = True
        ' add myself to the listeners device list (will start listener if not already so)
        xPLListener.Add(Me)
    End Sub
    ''' <summary>
    ''' Recreates an xPLDevice from a SavedState string. PLEASE NOTE: no attached event handlers nor callback 
    ''' functions will be restored. So after recreating the device they must be updated or no events nor callbacks
    ''' will be received (see also <seealso cref="CustomID"/> property). Also; when restoring a device this way the <c>VersionNumber</c>
    ''' property will NOT be restored, so if it was manually overriden, then it must be done again after each restore.
    ''' </summary>
    ''' <param name="SavedState">SavedState string containing all parameters to recreate the xPLDevice.</param>
    ''' <param name="RestoreEnabled">If <c>True</c>, the <c>Enabled</c> property will be set as recorded 
    ''' in the SavedState string, if set to <c>False</c> the device will not be Enabled, independent of the 
    ''' setting stored in the SavedState string.</param>
    ''' <remarks>The SavedState string can be obtained from the <c>GetState</c> method. Before recreating any devices
    ''' the <see cref="StateAppVersion"/> method can be used to verify the application version that created the SavedState.</remarks>
    ''' <exception cref="ArgumentException">Condition: 1) <c>SavedState</c> is either an empty string ("") or
    ''' <c>Is Nothing</c>, 2) <c>SavedState</c> value was created by a newer/unknown version of xpllib</exception>
    ''' <exception cref="Exception">Condition: parsing <c>SavedState</c> value failed</exception>
    Public Sub New(ByVal SavedState As String, ByVal RestoreEnabled As Boolean)
        Dim lst() As String
        Dim xVersion As String
        Dim aVersion As String
        Dim i As Integer
        Dim n As Integer
        Dim c As Integer
        Dim addr As xPLAddress
        Dim ciName As String
        Dim ciType As xPLConfigTypes
        Dim ciMaxValues As Integer
        Dim ciHidden As Boolean
        Dim ci As xPLConfigItem
        Dim db As String = ""

        If SavedState Is Nothing Then SavedState = ""
        If SavedState = "" Then
            LogError("xPLDevice.New from State", "State is empty string or Nothing", EventLogEntryType.Error)
            Throw New ArgumentException("Illegal value; empty string or Nothing", "SavedState")
        End If

        ' set version number, the one property NOT stored in the state
        VersionNumber = GetVersionNumber()

        ' split string in settings for individual devices and decode all items
        lst = SavedState.Split(XPL_STATESEP)
        For i = 0 To lst.Length - 1
            lst(i) = StateDecode(lst(i))
        Next
        ' get version of xpllib that created it
        i = 0
        xVersion = lst(i)
        db = db & vbCrLf & "xPLLib version: " & lst(i)
        i += 1
        ' get application version that created it
        aVersion = lst(i)
        db = db & vbCrLf & "App version: " & lst(i)
        i += 1
        Try

            Select Case xVersion
                Case "5.0", "5.1", "5.2", "5.3"
                    ' Restore device address
                    db = db & vbCrLf & "Address: " & lst(i)
                    addr = New xPLAddress(xPLAddressType.Source, lst(i))
                    mConfigItems.Address.Vendor = addr.Vendor
                    mConfigItems.Address.Device = addr.Device
                    mConfigItems.Address.Instance = addr.Instance
                    i += 1
                    db = db & vbCrLf & "Instance type: " & lst(i)
                    mInstanceType = CType([Enum].Parse(GetType(InstanceCreation), lst(i)), InstanceCreation)
                    i += 1
                    ' Restore settings 
                    db = db & vbCrLf & "Configurable: " & lst(i)
                    mConfigurable = Boolean.Parse(lst(i))
                    i += 1
                    db = db & vbCrLf & "Configured: " & lst(i)
                    mConfigured = Boolean.Parse(lst(i))
                    i += 1
                    ' do not restore the Enabled property, only at the end!
                    db = db & vbCrLf & "Enabled: " & lst(i) & ", RestoreEnabled: " & RestoreEnabled.ToString
                    If RestoreEnabled Then RestoreEnabled = Boolean.Parse(lst(i))
                    i += 1
                    db = db & vbCrLf & "MessagePassing: " & lst(i)
                    MessagePassing = CType([Enum].Parse(GetType(MessagePassingEnum), lst(i)), MessagePassingEnum)
                    i += 1
                    db = db & vbCrLf & "CustomID: " & lst(i)
                    CustomID = lst(i)
                    i += 1
                    db = db & vbCrLf & "CustomSettings: " & lst(i)
                    CustomSettings = lst(i)
                    i += 1
                    db = db & vbCrLf & "Debug: " & lst(i)
                    mDebug = Boolean.Parse(lst(i))
                    i += 1
                    ' config items
                    db = db & vbCrLf & "Conf_interval in seconds: " & lst(i)
                    mConfigItems.conf_IntervalInSec = Integer.Parse(lst(i))
                    i += 1
                    ' config items: groups
                    db = db & vbCrLf & "Groups: " & lst(i)
                    c = Integer.Parse(lst(i))
                    i += 1
                    For n = 1 To c
                        db = db & vbCrLf & "    " & lst(i)
                        mConfigItems.conf_Group.Add(lst(i))
                        i += 1
                    Next
                    ' config items: filters
                    db = db & vbCrLf & "Filters: " & lst(i)
                    c = Integer.Parse(lst(i))
                    i += 1
                    For n = 1 To c
                        db = db & vbCrLf & "    " & lst(i)
                        mConfigItems.conf_Filter.Add(lst(i))
                        i += 1
                    Next
                    ' config items: custom config items
                    db = db & vbCrLf & "Custom ConfigItems: " & lst(i)
                    c = Integer.Parse(lst(i))
                    i += 1
                    While i < lst.Length
                        ' Get values
                        db = db & vbCrLf & "    Name: " & lst(i)
                        ciName = lst(i)
                        db = db & vbCrLf & "        Type      : " & lst(i)
                        ciType = CType([Enum].Parse(GetType(xPLConfigTypes), lst(i + 1)), xPLConfigTypes)
                        db = db & vbCrLf & "        Max values: " & lst(i)
                        ciMaxValues = Integer.Parse(lst(i + 2))
                        db = db & vbCrLf & "        Hidden    : " & lst(i)
                        ciHidden = Boolean.Parse(lst(i + 3))
                        ' create configitem
                        ci = New xPLConfigItem(ciName, ciType, ciMaxValues)
                        ci.Hidden = ciHidden
                        i += 4
                        db = db & vbCrLf & "        Values    : " & lst(i)
                        c = Integer.Parse(lst(i))
                        i += 1
                        ' Get configitem values
                        For n = 1 To c
                            db = db & vbCrLf & "            " & lst(i)
                            ci.Add(lst(i))
                            i += 1
                        Next
                        ' add configitem to device CI list
                        ConfigItems.Add(ci)
                    End While
                    ' Go online if required
                    If Debug Then LogError("xPLDevice.New from State", db, EventLogEntryType.Information)
                    Me.Enabled = RestoreEnabled
                    If RestoreEnabled Then LogError("xPLDevice.New from State", "Went Enabled", EventLogEntryType.Information)

                Case Else
                    ' SavedState created by an unknown version of xpllib
                    LogError("xPLDevice.New from SavedState", "SavedState value was created by an unknown version of xpllib")
                    Throw New ArgumentException("SavedState value was created by an unknown version of xpllib", "SavedState")
            End Select

            ' add to the listeners device list (will start listener if not already so)
            xPLListener.Add(Me)
            If Debug Then LogError("xPLDevice.New from SavedState", "Success")

        Catch ex As Exception
            LogError("xPLDevice.New from SavedState", "Device could not be recreated from SavedState value. " & ex.ToString, EventLogEntryType.Error)
            LogError("xPLDevice.New from SavedState", "processed State information: " & vbCrLf & db)
            Throw New Exception("Device could not be recreated from SavedState value", ex)
        End Try

    End Sub

    ''' <summary>
    ''' Returns a SavedState string enabling the persistence of configuration information.
    ''' </summary>
    ''' <returns>A SavedState string, containing all configuration info from the device.</returns>
    ''' <param name="AppVersion">Version information of the host application.</param>
    ''' <remarks>The SavedState string can be used with the <c>xPLDevice.New(SavedState, RestoreEnabled)</c>
    ''' constructor to recreate the device in the exact same state.</remarks>
    Public Function GetState(ByVal AppVersion As String) As String
        Dim s As String
        Dim i As Integer
        Dim n As Integer
        Dim ci As xPLConfigItem
        Dim lst As New ArrayList
        Dim db As String = ""
        If Debug Then LogError("xPLDevice.GetState", "Creating state")
        ' Add version numbers
        lst.Add(XPL_LIB_VERSION)
        lst.Add(AppVersion)
        ' Store device address
        lst.Add(mConfigItems.Address.ToString)
        lst.Add(mInstanceType.ToString)
        ' Store settings 
        lst.Add(mConfigurable.ToString)
        lst.Add(mConfigured.ToString)
        lst.Add(mEnabled.ToString)
        lst.Add(MessagePassing.ToString)
        lst.Add(CustomID)
        lst.Add(CustomSettings)
        lst.Add(mDebug.ToString)
        ' config items
        lst.Add(ConfigItems.conf_IntervalInSec.ToString)
        ' config items: groups
        lst.Add(ConfigItems.conf_Group.Count.ToString)
        For i = 0 To Me.ConfigItems.conf_Group.Count - 1
            lst.Add(ConfigItems.conf_Group.Items(i).ToString)
        Next
        ' config items: filters
        lst.Add(ConfigItems.conf_Filter.Count.ToString)
        For i = 0 To Me.ConfigItems.conf_Filter.Count - 1
            lst.Add(ConfigItems.conf_Filter.Item(i).ToString)
        Next
        ' config items: custom config items
        lst.Add(ConfigItems.Count.ToString)
        For n = 0 To Me.ConfigItems.Count - 1
            ci = Me.ConfigItems.Item(n)
            lst.Add(ci.Name)
            lst.Add(ci.ConfigType.ToString)
            lst.Add(ci.MaxValues.ToString)
            lst.Add(ci.Hidden.ToString)
            lst.Add(ci.Count.ToString)
            For i = 0 To ci.Count - 1
                lst.Add(ci.Item(i))
            Next
        Next
        ' Construct result string
        s = StateEncode(CStr(lst(0)))
        For n = 1 To lst.Count - 1
            db = db & vbCrLf & CStr(lst(n))
            s = s & XPL_STATESEP & StateEncode(CStr(lst(n)))
        Next
        If Debug Then LogError("xPLDevice.GetState", "Success. Settings in SavedState: " & db)
        Return s
    End Function

    ''' <summary>
    ''' Disposes the xPLDevice object, before disposing the <c>Enabled</c> property will be set to <c>False</c>, which 
    ''' will provide a clean exit.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub Dispose() Implements IDisposable.Dispose
        Disposing = True
        If Debug Then LogError("xPLDevice.Dispose", "Start disposing...")
        Try
            If mEnabled Then
                ' Disable
                If Debug Then LogError("xPLDevice.Dispose", "Disableing...")
                Me.Enabled = False
                If Debug Then LogError("xPLDevice.Dispose", "Disableing success")
            End If
        Catch
            If Debug Then LogError("xPLDevice.Dispose", "Disableing failure")
        End Try
        Try
            ' remove myself from the listener (will deactivate listener if I'm the last one)
            If Debug Then LogError("xPLDevice.Dispose", "Remove from listener...")
            xPLListener.Remove(Me)
            If Debug Then LogError("xPLDevice.Dispose", "Remove from listener success")
        Catch
            If Debug Then LogError("xPLDevice.Dispose", "Remove from listener failure")
        End Try
        If Debug Then LogError("xPLDevice.Dispose", "Dispose completed")
    End Sub

    Protected Overrides Sub Finalize()
        If Debug Then LogError("xPLDevice.Finalize", "Finalizing...")
        Try
            If Not Disposing Then  'hm, somebody did not call Dispose
                Me.Dispose()       'probably our socket is disposed but try anyway to send a hbeat and cleanup nicely
            End If
        Catch ex As Exception

        Finally
            MyBase.Finalize()
        End Try
        If Debug Then LogError("xPLDevice.Finalize", "Finalizing complete")
    End Sub

#End Region

#Region "Message handling"

    Friend Sub IncomingMessage(ByVal myXPL As xPLMessage)

        If Not mEnabled Then
            If Debug Then LogError("xPLDevice.IncomingMessage", "Not enabled, exiting")
            Exit Sub ' only accept messages when we're enabled 
        End If

        Try
            Dim db As String = ""
            Dim pass As Boolean
            Dim x As New xPLEventArgs(myXPL)
            x.IsMyEcho = (mConfigItems.Address.ToString = myXPL.Source)
            x.IsHeartbeat = Left(myXPL.Schema, 6) = "hbeat."
            x.IsConfig = Left(myXPL.Schema, 7) = "config."
            x.IsForMeSpecific = (mConfigItems.Address.ToString = myXPL.Target)
            x.IsForMeGroup = (mConfigItems.conf_Group.IndexOf(myXPL.Target) <> -1)
            x.IsForMeBroadcast = (myXPL.Target = "*")
            x.IsFilterMatch = mConfigItems.conf_Filter.Matches(myXPL)
            x.IsForMe = x.IsForMeSpecific Or x.IsForMeGroup Or (x.IsForMeBroadcast And x.IsFilterMatch)

            If x.IsMyEcho And mEnabled Then ' receiving an echo, while set to go online, so we are online
                If mStatus <> xPLDeviceStatus.Online Then ' we weren't online already, so we just went online
                    ' prevent timer from setting us offline again by error
                    mLastHBeatEchoHeard = Now
                    mLastOwnHBeatSend = Now
                    ' set status to online!
                    If Debug Then LogError("xPLDevice.IncomingMessage", "Received my own echo; I am online!, raising event")
                    Try
                        RaiseEvent xPLStatusChange(Me, mStatus, xPLDeviceStatus.Online)
                    Catch ex As Exception
                        LogError("xPLDevice.IncomingMessage", "Exception returned from raising xPLStatusChange event: " & ex.ToString, EventLogEntryType.Error)
                    End Try
                    mStatus = xPLDeviceStatus.Online
                    ' sent heartbeat with new connection status
                    If Debug Then LogError("xPLDevice.IncomingMessage", "Sending heartbeat with updated status")
                    SendHeartbeatMessage()
                End If
            End If

            If x.IsMyEcho And (x.IsHeartbeat Or x.IsConfig) Then
                ' received my own hbeat echo
                mLastHBeatEchoHeard = Now
            End If

            If Not x.IsMyEcho Then
                'handle config messages - these are always targeted to the device
                If Debug Then LogError("xPLDevice.IncomingMessage", "Received non echo message")
                If x.IsConfig And x.IsForMeSpecific Then
                    If Debug Then LogError("xPLDevice.IncomingMessage", "Received config for me specific...")
                    HandleConfigMessage(myXPL)
                    If Debug Then LogError("xPLDevice.IncomingMessage", "Handled config for me specific.")
                End If
                ' Handle hbeat.request messages, do not apply filters for this
                If (x.IsForMeSpecific Or x.IsForMeGroup Or x.IsForMeBroadcast) And (myXPL.Schema = "hbeat.request") Then
                    If Debug Then LogError("xPLDevice.IncomingMessage", "Answering heartbeat request...")
                    WaitForRandomPeriod()
                    SendHeartbeatMessage(False)
                    If Debug Then LogError("xPLDevice.IncomingMessage", "Heartbeat request success")
                End If
            End If

            '
            ' Check wether the message needs to be passed through an event
            '
            pass = True
            db = "    Pass = True, starting"
            ' check against filters
            If x.IsForMeBroadcast Then
                If Not x.IsFilterMatch And (Me.MessagePassing And MessagePassingEnum.DoNotApplyFilters) = 0 Then
                    pass = False    ' don't pass broadcasts that don't pass my filters, while filters are enabled
                    db += vbCrLf & "    Pass = False, didn't pass filter settings"
                End If
            End If

            ' check if I should stop passing messages while in config mode
            If mConfigurable And Not mConfigured Then
                ' I'm in config mode
                If (Me.MessagePassing And MessagePassingEnum.PassWhileAwaitingConfig) = 0 Then
                    pass = False ' don't pass while in config mode
                    db += vbCrLf & "    Pass = False, don't pass while in config mode"
                End If
            End If

            ' should I be passing my echo's
            If x.IsMyEcho Then
                If (Me.MessagePassing And MessagePassingEnum.PassMyOwnEcho) = 0 Then
                    pass = False
                    db += vbCrLf & "    Pass = False, don't pass my own echo"
                Else
                    pass = True ' this could override the PassWhileAwaitingConfig option
                    db += vbCrLf & "    Pass = True, must pass my own echo"
                End If
            End If

            ' Should I pass heartbeat stuff, my own or someone elses
            If x.IsHeartbeat Then
                If x.IsForMeGroup Or x.IsForMeSpecific Or (x.IsMyEcho And ((Me.MessagePassing And MessagePassingEnum.PassMyOwnEcho) <> 0)) Then
                    ' my heartbeat stuff
                    If (Me.MessagePassing And MessagePassingEnum.PassMyHeartbeatStuff) = 0 Then
                        pass = False ' don't pass my own heartbeat stuff
                        db += vbCrLf & "    Pass = False, don't pass my own heartbeat stuff"
                    End If
                Else
                    ' someone elses heartbeat stuff.
                    If (Me.MessagePassing And MessagePassingEnum.PassOthersHeartbeats) = 0 Then
                        pass = False ' don't pass others heartbeat stuff
                        db += vbCrLf & "    Pass = False, don't pass someone elses heartbeat stuff"
                    End If
                End If
            End If

            ' Should I pass config stuff, my own or someone elses
            If x.IsConfig Then
                If x.IsForMeGroup Or x.IsForMeSpecific Then
                    ' my config stuff
                    If (Me.MessagePassing And MessagePassingEnum.PassMyConfigStuff) = 0 Then
                        pass = False ' don't pass my own config stuff
                        db += vbCrLf & "    Pass = False, don't pass my own config stuff"
                    End If
                Else
                    ' someone elses config stuff.
                    If (Me.MessagePassing And MessagePassingEnum.PassOthersConfig) = 0 Then
                        pass = False ' don't pass others config stuff
                        db += vbCrLf & "    Pass = False, don't pass someone elses config stuff"
                    End If
                End If
            End If

            'raise an event if the message was filtered by all the settings
            If Debug Then LogError("xPLDevice.IncomingMessage", "Should the message be passed;" & vbCrLf & db, EventLogEntryType.Information)
            If pass Then
                Try
                    RaiseEvent xPLMessageReceived(Me, x)
                Catch ex As Exception
                    LogError("xPLDevice.IncomingMessage", "Exception returned from raising xPLMessageReceived event: " & ex.ToString, EventLogEntryType.Error)
                End Try
            End If

        Catch ex As Exception
            LogError("xPLDevice.IncomingMessage", "Error for " & mConfigItems.Address.ToString & ": " & ex.ToString() & vbCrLf & myXPL.RawxPLReceived & vbCrLf & HexDump(myXPL.RawxPLReceived))
        End Try
        If Debug Then LogError("xPLDevice.IncomingMessage", "Done.", EventLogEntryType.Information)

    End Sub

    ''' <summary>
    ''' Sends an xPL message.
    ''' </summary>
    ''' <param name="myxPL">The xPL message object that needs to be sent</param>
    ''' <exception cref="MissingFieldsException">Condition: if the message fails the checks for creating a raw xPL string <see cref="xPLMessage.RawxPL"/>.</exception>
    ''' <exception cref="Exception">Condition: if the <c>Enabled</c> property is set to <c>False</c>.</exception>
    ''' <remarks>Other exceptions may occur from the network. Before sending the <c>Source</c> address will 
    ''' be set to the address of the device through which it will be sent.</remarks>
    Public Sub Send(ByVal myxPL As xPLMessage)
        Try
            If Debug Then LogError("xPLDevice.Send", "Sending message...", EventLogEntryType.Information)
            If Not mEnabled Then
                If Debug Then LogError("xPLDevice.Send", "Cannot send a message through a disabled xPL device. Enabled property must be set to True before sending messages.", EventLogEntryType.Error)
                Throw New Exception("Cannot send a message through a disabled xPL device. Enabled property must be set to True before sending messages.")
            Else
                myxPL.Source = Me.Address
                xPLListener.SendRawxPL(myxPL.RawxPL)
            End If
            If Debug Then LogError("xPLDevice.Send", "Success", EventLogEntryType.Information)
        Catch
            If Debug Then LogError("xPLDevice.Send", "Failed", EventLogEntryType.Information)
        End Try
    End Sub

    Private Sub HandleConfigMessage(ByVal myxPL As xPLMessage)
        Dim s As String = ""
        Dim t As String = ""

        ' Only handle command messages and only if we're set to be configurable
        If myxPL.MsgType <> xPLMessageTypeEnum.Command Then Exit Sub
        If Debug Then LogError("xPLDevice.HandleConfigMessage", "Dealing with config, message schema: " & myxPL.Schema)
        If Not mConfigurable Then
            If Debug Then LogError("xPLDevice.HandleConfigMessage", "Not configurable, exiting")
            Exit Sub
        End If

        ' What sort of config message is it?
        Select Case myxPL.Schema
            Case "config.current"
                If myxPL.KeyValueList.IndexOf("command") <> -1 Then
                    If myxPL.KeyValueList.Item("command").ToLower() = "request" Then
                        'reply with our current configuration
                        If Debug Then LogError("xPLDevice.HandleConfigMessage", "Sending config.current....")
                        Me.Send(ConfigItems.ConfigCurrent)
                        If Debug Then LogError("xPLDevice.HandleConfigMessage", "config.current send")
                    Else
                        If Debug Then LogError("xPLDevice.HandleConfigMessage", "config.current, but no 'command=request' key", EventLogEntryType.Error)
                    End If
                Else
                    If Debug Then LogError("xPLDevice.HandleConfigMessage", "config.current, but no 'command' key", EventLogEntryType.Error)
                End If
            Case "config.list"   'list all config options
                If Debug Then LogError("xPLDevice.HandleConfigMessage", "Sending config.list....")
                Me.Send(ConfigItems.ConfigList)
                If Debug Then LogError("xPLDevice.HandleConfigMessage", "config.list send")

            Case "config.response"  'our new configuration, deal with new settings
                s = ConfigItems.conf_Newconf
                If Debug Then LogError("xPLDevice.HandleConfigMessage", "config.response received...")
                ConfigItems.ConfigResponse(myxPL)   ' digest the configuration response
                If Debug Then LogError("xPLDevice.HandleConfigMessage", "config.response digested")

                ' check debug settings, do we have a debug CI?
                If ConfigItems.IndexOf("debug") <> -1 Then
                    ' did we receive a debug value in the message?
                    If myxPL.KeyValueList.IndexOf("debug") <> -1 Then
                        ' a debug item was received, check its value from the configitem
                        Select Case ConfigItems("debug").Item(0).ToLower.Trim
                            Case "true", "on", "1"
                                Debug = True
                                LogError("xPLDevice.HandleConfigMessage", "Debug = True")
                            Case "false", "off", "0"
                                Debug = False
                                LogError("xPLDevice.HandleConfigMessage", "Debug = False")
                            Case Else
                                ' whatever was received was not recognized, no changes
                                LogError("xPLDevice.HandleConfigMessage", "Debug value provided is unknown", EventLogEntryType.Error)
                        End Select
                    End If
                End If

                ' send 'end' message for current device name if my name changed, or if its the 
                ' first time I'm configured
                Try
                    If s <> ConfigItems.conf_Newconf Then
                        ' name changed, send end message, with old name
                        If Debug Then LogError("xPLDevice.HandleConfigMessage", "Newconf changed")
                        t = ConfigItems.conf_Newconf
                        ConfigItems.conf_Newconf = s
                        SendHeartbeatMessage(True)
                        ConfigItems.conf_Newconf = t
                    Else
                        ' name didn't change, but if its the first time I'm configured, then still send
                        If Debug Then LogError("xPLDevice.HandleConfigMessage", "Newconf not changed")
                        If Not mConfigured Then
                            SendHeartbeatMessage(True)
                        End If
                    End If
                Catch
                End Try

                If Not mConfigured Then
                    ' first time we're configured, raise event!
                    Me.mConfigured = True
                    Try
                        RaiseEvent xPLConfigDone(Me)
                    Catch ex As Exception
                        LogError("xPLDevice.HandleConfigMessage", "Exception returned from raising xPLConfigDone event: " & ex.ToString, EventLogEntryType.Error)
                    End Try
                Else
                    ' raise event for re-configuration
                    Try
                        RaiseEvent xPLReConfigDone(Me)
                    Catch ex As Exception
                        LogError("xPLDevice.HandleConfigMessage", "Exception returned from raising xPLReConfigDone event: " & ex.ToString, EventLogEntryType.Error)
                    End Try
                End If

                ' sent heartbeat to let the world know we're good to go
                SendHeartbeatMessage(False)

        End Select
        If Debug Then LogError("xPLDevice.HandleConfigMessage", "Done.")
    End Sub

#End Region

#Region "Timer, Heartbeat"

    Private Sub XPLTimerElapsed(ByVal sender As Object, ByVal e As Timers.ElapsedEventArgs)
        Dim db As String = ""
        If Disposing Then
            Exit Sub
        End If

        XPLTimer.Stop()
        Try
            Dim SendHBeat As Boolean = False
            ' update periods as another period has passed by.
            mHBeatCount += CInt(Int(XPLTimer.Interval / 1000))
            db += vbCrLf & "    Heartbeatcount: " & mHBeatCount
            ' Have I lost my network connection?
            If mStatus = xPLDeviceStatus.Online And mLastHBeatEchoHeard < mLastOwnHBeatSend Then
                ' so I haven't heard my last echo yet
                If mLastOwnHBeatSend.AddSeconds(XPL_MYECHO_TIMEOUT) < Now Then
                    ' we're past the timeout, so we must assume we lost the connection
                    db += vbCrLf & "    Connection is lost"
                    mHubWaitTime = 0
                    Try
                        RaiseEvent xPLStatusChange(Me, mStatus, xPLDeviceStatus.Connecting)
                    Catch ex As Exception
                        db += vbCrLf & "    Exception returned from raising xPLStatusChange event"
                        LogError("xPLDevice.xPLTimerElapsed", "Exception returned from raising xPLStatusChange event: " & ex.ToString, EventLogEntryType.Error)
                    End Try
                    mStatus = xPLDeviceStatus.Connecting
                    SendHBeat = True
                    ' report the lost connection to the listener
                    db += vbCrLf & "    Status to 'Connecting', now report lost connection to Listener"
                    xPLListener.ReportLostConnection()
                End If
            End If


            Select Case mStatus
                Case xPLDeviceStatus.Offline
                    ' nothing to do
                    db += vbCrLf & "    Status: Offline, nothing to do"

                Case xPLDeviceStatus.Connecting
                    ' Sent heartbeat every XPL_NOHUB_HBEAT seconds until we've been waiting longer than
                    ' XPL_NOHUB_TIMEOUT seconds, then we sent heartbeats every XPL_NOHUB_LOWERFREQ seconds

                    ' update periods as another period has passed by.
                    mHubWaitTime += CInt(Int(XPLTimer.Interval / 1000))
                    If mHubWaitTime > 24 * 60 * 60 Then
                        ' prevent overflow error
                        mHubWaitTime = XPL_NOHUB_TIMEOUT
                    End If
                    db += vbCrLf & "    Status: Connecting"

                    If mHubWaitTime < XPL_NOHUB_TIMEOUT Then
                        ' We're still in the initial period
                        ' enough time passed to sent a new hbeat?
                        If mHBeatCount >= XPL_NOHUB_HBEAT Then
                            SendHBeat = True
                            mHBeatCount = 0
                            db += vbCrLf & "    looking for hub in initial period. Period passed, send heartbeat"
                        Else
                            db += vbCrLf & "    looking for hub in initial period. Period not passed, no heartbeat"
                        End If
                    Else
                        ' Looking for the hub, timed out, so we continue at a lower pace
                        ' check interval settings
                        If mHubWaitTime <= XPL_NOHUB_TIMEOUT + XPL_NOHUB_HBEAT Then
                            ' its the first time we're past the XPL_NOHUB_TIMEOUT
                            ' something seems wrong, so inform listener
                            db += vbCrLf & "    looking for hub past initial period. First time; report lost connection"
                            xPLListener.ReportLostConnection()
                        End If
                        ' enough time passed to sent a new hbeat?
                        If mHBeatCount >= XPL_NOHUB_LOWERFREQ Then
                            SendHBeat = True
                            mHBeatCount = 0
                            db += vbCrLf & "    looking for hub past initial period. Period passed, send heartbeat"
                        Else
                            db += vbCrLf & "    looking for hub past initial period. Period not passed, no heartbeat"
                        End If
                    End If

                Case xPLDeviceStatus.Online
                    ' enough time passed to sent a new hbeat?
                    If mHBeatCount > mConfigItems.conf_IntervalInSec Then
                        SendHBeat = True
                        mHBeatCount = 0
                        db += vbCrLf & "    Status: Online. Period passed, send heartbeat"
                    Else
                        db += vbCrLf & "    Status: Online. Period not passed, no heartbeat"
                    End If
            End Select
            ' go and sent the hbeat message
            If SendHBeat Then
                db += vbCrLf & "    Sending Heartbeat"
                SendHeartbeatMessage()
            End If
            db += vbCrLf & "xPLDevice.XPLTimerElapsed completed"
        Finally
            XPLTimer.Start()
        End Try
        If Debug Then LogError("xPLDevice.XPLTimerElapsed", db, EventLogEntryType.Information)
    End Sub

    ''' <summary>
    ''' Sends a heartbeat message. Either a 'hbeat.app' or 'config.app' depending on configuration status.
    ''' </summary>
    ''' <remarks>Heartbeat will only be sent if device is currently <c>Enabled</c>, if not, then no exception will be thrown.</remarks>
    Public Sub SendHeartbeatMessage()
        SendHeartbeatMessage(False)
    End Sub

    Private Sub SendHeartbeatMessage(ByVal ClosingDown As Boolean)
        Try
            Dim s As String
            Dim x As xPLMessage
            Dim kv As xPLKeyValuePairs

            If Not mEnabled Then Exit Sub

            If Debug Then LogError("xPLDevice.SendHeartbeatMessage", "Setting up heartbeat", EventLogEntryType.Information)

            x = New xPLMessage
            x.MsgType = xPLMessageTypeEnum.Status
            x.Source = Me.Address
            x.Target = "*"

            ' Determine the CLASS of the heartbeat to sent, regular hbeat, or configuration hbeat
            s = ""
            If mConfigurable And Not mConfigured Then
                s = "config"
            Else
                s = "hbeat"
            End If

            ' If we're closing down then we send an 'end' TYPE, otherwise an 'app'
            If ClosingDown Then
                s += ".end"
            Else
                s += ".app"
            End If
            x.Schema = s
            x.KeyValueList.Add(New xPLKeyValuePair("interval", CStr(Me.mConfigItems.conf_IntervalInMin)))
            x.KeyValueList.Add(New xPLKeyValuePair("port", xPLListener.PortNumber.ToString))
            x.KeyValueList.Add(New xPLKeyValuePair("remote-ip", RemoveInvalidxPLchars(xPLListener.IPaddress, XPL_STRING_TYPES.Values)))
            If Me.VersionNumber <> "" Then x.KeyValueList.Add(New xPLKeyValuePair("version", Me.VersionNumber))
            If ClosingDown Then
                ' closing down, so always report Offline as status
                x.KeyValueList.Add(New xPLKeyValuePair("status", "offline"))
            Else
                ' report current connection status
                Select Case Me.Status
                    Case xPLDeviceStatus.Offline
                        x.KeyValueList.Add(New xPLKeyValuePair("status", "offline"))
                    Case xPLDeviceStatus.Connecting
                        x.KeyValueList.Add(New xPLKeyValuePair("status", "connecting"))
                    Case xPLDeviceStatus.Online
                        x.KeyValueList.Add(New xPLKeyValuePair("status", "online"))
                End Select
            End If

            If Not xPLGetHBeatItems Is Nothing Then
                ' go collect heartbeat items
                Try
                    kv = xPLGetHBeatItems.Invoke(Me)
                Catch ex As Exception
                    LogError("xPLDevice.SendHeartBeatMessage", "Callback to collect hbeat items returned an exception: " & ex.ToString, EventLogEntryType.Error)
                    kv = Nothing
                End Try
                If Not kv Is Nothing Then
                    For i As Integer = 0 To kv.Count - 1
                        x.KeyValueList.Add(kv.Item(i))
                    Next
                End If
            End If

            Me.Send(x)
            ' update time the last heartbeat was sent
            mLastOwnHBeatSend = Now
            If Debug Then LogError("xPLDevice.SendHeartbeatMessage", "Success", EventLogEntryType.Information)

        Catch ex As Exception
            LogError("xPLDevice.SendHeartbeatMessage", "Failed..." & mConfigItems.Address.ToString & vbCrLf & ex.ToString(), EventLogEntryType.Information)
        End Try
    End Sub

    ''' <summary>
    ''' sub gets called by the listener whenever the IP address or Port number changes.
    ''' </summary>
    ''' <remarks>Device must send a new heartbeat with the latest settings</remarks>
    Friend Sub IPaddressChange()
        If mEnabled Then
            If Debug Then LogError("xPLDevice.IPaddressChange", Me.Address & " is informed about new address, sending heartbeat")
            SendHeartbeatMessage()
        End If
    End Sub

#End Region

    ''' <summary>
    ''' Sets the Enabled property to <c>True</c>
    ''' </summary>
    ''' <remarks>See also <seealso cref="xPLDevice.Enabled"/>.</remarks>
    Public Sub Enable()
        If Me.Enabled = False Then Me.Enabled = True
    End Sub
    ''' <summary>
    ''' Sets the Enabled property to <c>False</c>
    ''' </summary>
    ''' <remarks>See also <seealso cref="xPLDevice.Enabled"/>.</remarks>
    Public Sub Disable()
        If Me.Enabled = True Then Me.Enabled = False
    End Sub
End Class

