unit uPSI_PS_listener;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

type
(*----------------------------------------------------------------------------*)
  TPSImport_PS_listener = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;


{ compile-time registration functions }
procedure SIRegister_TxPLPSListener(CL: TPSPascalCompiler);
procedure SIRegister_PS_listener(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TxPLPSListener(CL: TPSRuntimeClassImporter);
procedure RIRegister_PS_listener(CL: TPSRuntimeClassImporter);

implementation


uses u_xpl_message
     , u_xpl_globals
     , uPSUtils
     , PS_listener
     ;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TxPLPSListener(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TxPLListener', 'TxPLPSListener') do
  with CL.AddClassN(CL.FindClass('TxPLListener'),'TxPLPSListener') do
  begin
    RegisterMethod('Function MessageType : string');
    RegisterMethod('Function MessageSender : string');
    RegisterMethod('Function MessageSchema : string');
    RegisterMethod('Function Msg_Class : string');
    RegisterMethod('Function Msg_Sender_Device : string');
    RegisterMethod('Function MessageValues : integer');
    RegisterMethod('Function MessageKey( i : integer) : string');
    RegisterMethod('Function MessageValue( i : integer) : string');
    RegisterMethod('Function MessageValueFromKey( s : string) : string');
    RegisterMethod('Function GlobalValue( aString : string) : string');
    RegisterMethod('Function GlobalFormer( aString : string) : string');
    RegisterMethod('Function GlobalCreated( aString : string) : TDateTime');
    RegisterMethod('Function GlobalModified( aString : string) : TDateTime');
    RegisterMethod('Function Exists( aString : string; bDelete : boolean) : boolean');
    RegisterMethod('Procedure Value( aString, aValue : string)');
    RegisterMethod('Procedure Log( aString : string)');
    RegisterMethod('Procedure SendMsg(aMsgType : string; aTarget,aSchema,aBody : string);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_PS_listener(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TxPLMessageArrived', 'Function ( aMessage : String) : Longint');
  CL.AddTypeS('TStopScript', 'Function  : Longint');
  SIRegister_TxPLPSListener(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerGlobalList_R(Self: TxPLPSListener; var T: TxPLCustomGlobals);
begin T := Self.GlobalList; end;

(*----------------------------------------------------------------------------*)
Function TxPLPSListenerCreate_P(Self: TClass; CreateNewInstance: Boolean;  const aOwner : TComponent):TObject;
Begin Result := TxPLPSListener.Create(aOwner); END;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerxPLMessage_W(Self: TxPLPSListener; const T: TxPLMessage);
Begin Self.xPLMessage := T; end;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerxPLMessage_R(Self: TxPLPSListener; var T: TxPLMessage);
Begin T := Self.xPLMessage; end;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerStopScript_W(Self: TxPLPSListener; const T: TStopScript);
Begin Self.StopScript := T; end;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerStopScript_R(Self: TxPLPSListener; var T: TStopScript);
Begin T := Self.StopScript; end;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerMessageArrived_W(Self: TxPLPSListener; const T: TxPLMessageArrived);
Begin Self.MessageArrived := T; end;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerMessageArrived_R(Self: TxPLPSListener; var T: TxPLMessageArrived);
Begin T := Self.MessageArrived; end;

(*----------------------------------------------------------------------------*)
procedure TxPLPSListenerPSScript_R(Self: TxPLPSListener; var T: TPSScript);
Begin T := Self.PSScript; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TxPLPSListener(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TxPLPSListener) do
  begin
    RegisterMethod(@TxPLPSListener.MessageType, 'MessageType');
    RegisterMethod(@TxPLPSListener.MessageSender, 'MessageSender');
    RegisterMethod(@TxPLPSListener.MessageSchema, 'MessageSchema');
    RegisterMethod(@TxPLPSListener.Msg_Class, 'Msg_Class');
    RegisterMethod(@TxPLPSListener.Msg_Sender_Device, 'Msg_Sender_Device');
    RegisterMethod(@TxPLPSListener.MessageValues, 'MessageValues');
    RegisterMethod(@TxPLPSListener.MessageKey, 'MessageKey');
    RegisterMethod(@TxPLPSListener.MessageValue, 'MessageValue');
    RegisterMethod(@TxPLPSListener.MessageValueFromKey, 'MessageValueFromKey');
    RegisterMethod(@TxPLPSListener.GlobalValue, 'GlobalValue');
    RegisterMethod(@TxPLPSListener.GlobalFormer, 'GlobalFormer');
    RegisterMethod(@TxPLPSListener.GlobalCreated, 'GlobalCreated');
    RegisterMethod(@TxPLPSListener.GlobalModified, 'GlobalModified');
    RegisterMethod(@TxPLPSListener.Exists, 'Exists');
    RegisterMethod(@TxPLPSListener.Value, 'Value');
    RegisterMethod(@TxPLPSListener.Log, 'Log');
    RegisterMethod(@TxPLPSListener.SendMsg, 'SendMsg');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_PS_listener(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TxPLPSListener(CL);
end;



{ TPSImport_PS_listener }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PS_listener.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PS_listener(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PS_listener.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PS_listener(ri);
end;
(*----------------------------------------------------------------------------*)


end.
